
/**
 * Copyright 2013 Marc Schachtel, Germany
 */

package com.cloutree.server.ui.model;

import java.io.File;

import com.cloutree.server.permission.UserManager;
import com.cloutree.server.persistence.entity.Model;
import com.cloutree.server.persistence.entity.Modelrevision;
import com.cloutree.server.persistence.service.ModelService;
import com.cloutree.server.session.ClouTreeSession;
import com.cloutree.server.ui.model.pmml.PmmlModelRevisionViewer;
import com.cloutree.server.ui.navigation.NavigationController;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.FileResource;
import com.vaadin.server.ThemeResource;
import com.vaadin.server.VaadinService;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

/**
 * ModelFileItem
 *
 * @author marc
 *
 * Since 26.08.2013
 */
public class ModelFileItem extends CustomComponent implements Button.ClickListener {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private HorizontalLayout modelFileItemLayout;

	@AutoGenerated
	private Button buttonActivate;

	@AutoGenerated
	private Button buttonView;

	@AutoGenerated
	private Label labelFilename;

	@AutoGenerated
	private Embedded fileIcon;

	private Model model;
    
    private Modelrevision modelrevision;

    private static final long serialVersionUID = 1L;
    
    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public ModelFileItem() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	
		// IMPLEMENTATION
		//Listeners for Buttons
		this.buttonView.addClickListener(this);
		this.buttonActivate.addClickListener(this);
	
    }

    public Model getModel() {
        return model;
    }

    public void setModel(Model model) {
        this.model = model;
    }

    public Modelrevision getModelrevision() {
        return modelrevision;
    }

    public void setModelrevision(Modelrevision modelrevision) {
        this.modelrevision = modelrevision;
    }
    
    public void init() throws Exception {
		
		if(model == null || modelrevision == null) {
		    throw new Exception("Model or Modelrevision not set");
		}
		
		this.labelFilename.setValue(this.modelrevision.getFile());
		
		// Set default file icon
		String basepath = VaadinService.getCurrent().getBaseDirectory().getAbsolutePath();
		FileResource resourceIcon = new FileResource(new File(basepath + "/WEB-INF/images/icons/status-inactive-small.png"));
		if(resourceIcon.getSourceFile().exists()) {
			this.fileIcon.setSource(resourceIcon);
		}
		
		if(this.model.getActiveVersion().equals(this.modelrevision.getRevision())) {
		    this.buttonActivate.setEnabled(false);
		    
		    // Set active file icon
		    FileResource resourceActiveIcon = new FileResource(new File(basepath + "/WEB-INF/images/icons/status-active-small.png"));
			if(resourceActiveIcon.getSourceFile().exists()) {
				this.fileIcon.setSource(resourceActiveIcon);
			}
		    
		}
		
		if(!UserManager.getCurrentUser().hasWritePermission()) {
		    this.buttonActivate.setEnabled(false);
		}
	
    }

    /* (non-Javadoc)
     * @see com.vaadin.ui.Button.ClickListener#buttonClick(com.vaadin.ui.Button.ClickEvent)
     */
    @Override
    public void buttonClick(ClickEvent event) {
	
	if(event.getButton().equals(this.buttonView)) { // VIEW REVISION
	    
	    PmmlModelRevisionViewer viewer = new PmmlModelRevisionViewer();
	    viewer.setModel(model);
	    viewer.setModelRevision(this.modelrevision);
	    viewer.setSizeFull();
    	
	    VerticalLayout layout = new VerticalLayout();
	    layout.setMargin(false);
	    layout.setSpacing(false);
	    layout.setSizeFull();
	    layout.addComponent(viewer);
    	
	    Window fileViewerWindow = new Window(this.model.getName() + ", Revision " + this.modelrevision.getRevision());
	    fileViewerWindow.center();
	    fileViewerWindow.setModal(true);
	    fileViewerWindow.setHeight("700px");
	    fileViewerWindow.setWidth("900px");
	    fileViewerWindow.setContent(layout);
    
	    this.getUI().addWindow(fileViewerWindow);
	    
	} else if(event.getButton().equals(this.buttonActivate)) { // ACTIVATE REVISION
	    
	    this.model.setActiveVersion(this.modelrevision.getRevision());
	    ModelService modelService = new ModelService(ClouTreeSession.getInstance());
	    if(!modelService.updateModel(this.model)){
	    	Notification.show("Unable to activate revision", Notification.Type.ERROR_MESSAGE);
		return;
	    }
	    
	    NavigationController.navigateToModel(this.model.getName());
	}
    }

    @AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("45px");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("45px");
		
		// modelFileItemLayout
		modelFileItemLayout = buildModelFileItemLayout();
		mainLayout.addComponent(modelFileItemLayout,
				"top:0.0px;right:0.0px;bottom:0.0px;left:0.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildModelFileItemLayout() {
		// common part: create layout
		modelFileItemLayout = new HorizontalLayout();
		modelFileItemLayout.setImmediate(false);
		modelFileItemLayout.setWidth("100.0%");
		modelFileItemLayout.setHeight("100.0%");
		modelFileItemLayout.setMargin(false);
		modelFileItemLayout.setSpacing(true);
		
		// fileIcon
		fileIcon = new Embedded();
		fileIcon.setImmediate(false);
		fileIcon.setWidth("32px");
		fileIcon.setHeight("32px");
		fileIcon.setSource(new ThemeResource("img/component/embedded_icon.png"));
		fileIcon.setType(1);
		fileIcon.setMimeType("image/png");
		modelFileItemLayout.addComponent(fileIcon);
		modelFileItemLayout.setComponentAlignment(fileIcon, new Alignment(48));
		
		// labelFilename
		labelFilename = new Label();
		labelFilename.setImmediate(false);
		labelFilename.setWidth("-1px");
		labelFilename.setHeight("-1px");
		labelFilename.setValue("Label");
		modelFileItemLayout.addComponent(labelFilename);
		modelFileItemLayout.setExpandRatio(labelFilename, 1.0f);
		modelFileItemLayout.setComponentAlignment(labelFilename, new Alignment(
				33));
		
		// buttonView
		buttonView = new Button();
		buttonView.setCaption("View Revision");
		buttonView.setImmediate(true);
		buttonView.setWidth("-1px");
		buttonView.setHeight("-1px");
		modelFileItemLayout.addComponent(buttonView);
		modelFileItemLayout
				.setComponentAlignment(buttonView, new Alignment(48));
		
		// buttonActivate
		buttonActivate = new Button();
		buttonActivate.setCaption("Activate");
		buttonActivate.setImmediate(true);
		buttonActivate.setWidth("-1px");
		buttonActivate.setHeight("-1px");
		modelFileItemLayout.addComponent(buttonActivate);
		modelFileItemLayout.setComponentAlignment(buttonActivate,
				new Alignment(34));
		
		return modelFileItemLayout;
	}

}
