
/**
 * Copyright 2013 Marc Schachtel, Germany
 */

package com.cloutree.server.ui.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.Collections;
import java.util.List;

import com.cloutree.modelevaluator.ModelTypes;
import com.cloutree.server.permission.UserManager;
import com.cloutree.server.persistence.entity.Model;
import com.cloutree.server.persistence.entity.Modelrevision;
import com.cloutree.server.persistence.entity.util.DescendingRevisionComparator;
import com.cloutree.server.persistence.service.ModelService;
import com.cloutree.server.session.ClouTreeSession;
import com.cloutree.server.ui.navigation.NavigationController;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.Page;
import com.vaadin.server.VaadinService;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Upload;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Upload.FailedEvent;
import com.vaadin.ui.Upload.Receiver;
import com.vaadin.ui.Upload.SucceededEvent;
import com.vaadin.ui.Upload.SucceededListener;

/**
 * ModelFileList
 *
 * @author marc
 *
 * Since 26.08.2013
 */
public class ModelFileList extends CustomComponent implements Receiver, SucceededListener {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private AbsoluteLayout mainLayout;

    @AutoGenerated
    private VerticalLayout modelFileListLayout;

    @AutoGenerated
    private Upload uploadNewFile;

    @AutoGenerated
    private Panel modelFileListPanel;

    @AutoGenerated
    private VerticalLayout modelFileListItemsLayout;

    private Model model;
    
    private Modelrevision revisionInUpload;
    
    private List<Modelrevision> revisions;

    private static final long serialVersionUID = 1L;
    
    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    @SuppressWarnings("deprecation")
	public ModelFileList() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	
		// Implementation
		this.uploadNewFile.addSucceededListener(this);
		this.uploadNewFile.setReceiver(this);
		
		this.uploadNewFile.addListener(new Upload.FailedListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void uploadFailed(FailedEvent event) {
				// Nothing to do here
				event.getFilename();
			}
		});
    }

    public Model getModel() {
        return model;
    }

    public void setModel(Model model) {
        this.model = model;
    }
    
    public void init() throws Exception {
	
	if(this.model == null) {
	    throw new Exception("Model is not set");
	}
	
	ModelService modelService = new ModelService(ClouTreeSession.getInstance());
	this.revisions = modelService.getRevisionsForModel(this.model);
	
	if(this.revisions == null) {
	    return;
	}
	
	Collections.sort(this.revisions, new DescendingRevisionComparator());
	
	for(Modelrevision revision : this.revisions) {
	    ModelFileItem fileItem = new ModelFileItem();
	    fileItem.setModel(this.model);
	    fileItem.setModelrevision(revision);
	    fileItem.init();
	    fileItem.setWidth("100%");
	    this.modelFileListItemsLayout.addComponent(fileItem);
	}
	
	if(!UserManager.getCurrentUser().hasWritePermission()) {
	    this.uploadNewFile.setEnabled(false);
	}
	
    }

    @AutoGenerated
    private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// modelFileListLayout
		modelFileListLayout = buildModelFileListLayout();
		mainLayout.addComponent(modelFileListLayout,
			"top:0.0px;right:0.0px;bottom:0.0px;left:0.0px;");
		
		return mainLayout;
    }

    @AutoGenerated
    private VerticalLayout buildModelFileListLayout() {
		// common part: create layout
		modelFileListLayout = new VerticalLayout();
		modelFileListLayout.setImmediate(false);
		modelFileListLayout.setWidth("100.0%");
		modelFileListLayout.setHeight("100.0%");
		modelFileListLayout.setMargin(false);
		modelFileListLayout.setSpacing(true);
		
		// modelFileListPanel
		modelFileListPanel = buildModelFileListPanel();
		modelFileListLayout.addComponent(modelFileListPanel);
		modelFileListLayout.setExpandRatio(modelFileListPanel, 1.0f);
		
		// uploadNewFile
		uploadNewFile = new Upload();
		uploadNewFile.setCaption("upload new model file");
		uploadNewFile.setImmediate(false);
		uploadNewFile.setWidth("-1px");
		uploadNewFile.setHeight("-1px");
		modelFileListLayout.addComponent(uploadNewFile);
		modelFileListLayout.setComponentAlignment(uploadNewFile, new Alignment(
			6));
		
		return modelFileListLayout;
    }

    @AutoGenerated
    private Panel buildModelFileListPanel() {
		// common part: create layout
		modelFileListPanel = new Panel();
		modelFileListPanel.setImmediate(false);
		modelFileListPanel.setWidth("100.0%");
		modelFileListPanel.setHeight("100.0%");
		
		// modelFileListItemsLayout
		modelFileListItemsLayout = new VerticalLayout();
		modelFileListItemsLayout.setImmediate(false);
		modelFileListItemsLayout.setWidth("100.0%");
		modelFileListItemsLayout.setHeight("-1px");
		modelFileListItemsLayout.setMargin(true);
		modelFileListItemsLayout.setSpacing(true);
		modelFileListPanel.setContent(modelFileListItemsLayout);
		
		return modelFileListPanel;
    }

    @Override
    public OutputStream receiveUpload(String filename, String mimeType) {

    	if(this.model.getType().equals(ModelTypes.PMML.toString()) && !mimeType.equals("text/xml")) {
	       	new Notification("No valid xml-file but" + mimeType, Notification.Type.ERROR_MESSAGE);
	       	this.uploadNewFile.interruptUpload();
	       	this.uploadNewFile.setImmediate(true);
	       	return null;
    	} 
    	// TODO When R is implemented
//    	else if(this.model.getType().equals(ModelTypes.NativeR.toString()) && !mimeType.equals("text/R")) {
//	       	new Notification("No valid R-model-file but" + mimeType, Notification.Type.ERROR_MESSAGE);
//	       	this.uploadNewFile.interruptUpload();
//	       	this.uploadNewFile.setImmediate(true);
//	      	return null;
//    	}
    	
		Integer revisionNumber = 1;
		
		if(this.revisions.size() > 0) {
		    revisionNumber = this.revisions.get(0).getRevision() + 1;
		}
		
		Modelrevision modelRevision = new Modelrevision();
		modelRevision.setId(this.model.getId() + "_" + this.model.getName() + "_" + revisionNumber);
		modelRevision.setModel(this.model.getId());
		modelRevision.setRevision(revisionNumber);
		modelRevision.setFile("/live/pmml/" + this.model.getId() + "_" + this.model.getName() + "/" + modelRevision.getId() + ".xml");
		
		this.revisionInUpload = modelRevision;
		
		FileOutputStream fos = null;
		
	        try {
	            // Open the file for writing.
	            String basepath = VaadinService.getCurrent().getBaseDirectory().getAbsolutePath();
	            File file = new File(basepath + "/WEB-INF/storage" + modelRevision.getFile());
	            fos = new FileOutputStream(file);
	            
	        } catch (final Exception e) {
	            new Notification("Could not open file! ",
	                             e.getMessage(),
	                             Notification.Type.ERROR_MESSAGE)
	                .show(Page.getCurrent());
	            return null;
	        }
	        return fos; // Return the output stream to write to
	    }
    
    @Override
    public void uploadSucceeded(SucceededEvent event) {
        // Initiate Model with File
        ModelService modelService = new ModelService(ClouTreeSession.getInstance());
        modelService.storeRevision(this.revisionInUpload);
        
        NavigationController.navigateToModel(this.model.getName());
    }
    
}
