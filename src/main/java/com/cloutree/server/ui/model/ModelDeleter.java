
/**
 * Copyright 2013 Marc Schachtel, Germany
 */

package com.cloutree.server.ui.model;

import com.cloutree.server.persistence.entity.Model;
import com.cloutree.server.persistence.service.ModelService;
import com.cloutree.server.session.ClouTreeSession;
import com.cloutree.server.ui.navigation.NavigationController;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

/**
 * ModelDeleter
 *
 * @author marc
 *
 * Since 28.08.2013
 */
public class ModelDeleter extends CustomComponent implements Button.ClickListener {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private AbsoluteLayout mainLayout;

    @AutoGenerated
    private VerticalLayout modelDeleterLayout;

    @AutoGenerated
    private HorizontalLayout buttonLayout;

    @AutoGenerated
    private Button buttonNo;

    @AutoGenerated
    private Button buttonYes;

    @AutoGenerated
    private Label labelQuestion;

    private static final long serialVersionUID = 1L;
    
    private Model model;
    
    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public ModelDeleter() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	
		this.buttonNo.addClickListener(this);
		this.buttonYes.addClickListener(this);
    }

    public void setModel(Model model) {
		this.model = model;
		this.labelQuestion.setValue("Do you really want to delete " + this.model.getName() + "?");
    }

    @AutoGenerated
    private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// modelDeleterLayout
		modelDeleterLayout = buildModelDeleterLayout();
		mainLayout.addComponent(modelDeleterLayout,
			"top:0.0px;right:0.0px;bottom:0.0px;left:0.0px;");
		
		return mainLayout;
    }

    @AutoGenerated
    private VerticalLayout buildModelDeleterLayout() {
		// common part: create layout
		modelDeleterLayout = new VerticalLayout();
		modelDeleterLayout.setImmediate(false);
		modelDeleterLayout.setWidth("100.0%");
		modelDeleterLayout.setHeight("100.0%");
		modelDeleterLayout.setMargin(false);
		
		// labelQuestion
		labelQuestion = new Label();
		labelQuestion.setImmediate(false);
		labelQuestion.setWidth("-1px");
		labelQuestion.setHeight("-1px");
		labelQuestion.setValue("Question");
		modelDeleterLayout.addComponent(labelQuestion);
		modelDeleterLayout.setComponentAlignment(labelQuestion, new Alignment(
			48));
		
		// buttonLayout
		buttonLayout = buildButtonLayout();
		modelDeleterLayout.addComponent(buttonLayout);
		modelDeleterLayout.setComponentAlignment(buttonLayout,
			new Alignment(48));
		
		return modelDeleterLayout;
    }

    @AutoGenerated
    private HorizontalLayout buildButtonLayout() {
		// common part: create layout
		buttonLayout = new HorizontalLayout();
		buttonLayout.setImmediate(false);
		buttonLayout.setWidth("-1px");
		buttonLayout.setHeight("-1px");
		buttonLayout.setMargin(false);
		buttonLayout.setSpacing(true);
		
		// buttonYes
		buttonYes = new Button();
		buttonYes.setCaption("Yes");
		buttonYes.setImmediate(true);
		buttonYes.setWidth("100px");
		buttonYes.setHeight("-1px");
		buttonLayout.addComponent(buttonYes);
		
		// buttonNo
		buttonNo = new Button();
		buttonNo.setCaption("No");
		buttonNo.setImmediate(true);
		buttonNo.setWidth("100px");
		buttonNo.setHeight("-1px");
		buttonLayout.addComponent(buttonNo);
		
		return buttonLayout;
    }

    /* (non-Javadoc)
     * @see com.vaadin.ui.Button.ClickListener#buttonClick(com.vaadin.ui.Button.ClickEvent)
     */
    @Override
    public void buttonClick(ClickEvent event) {
		if(event.getButton().equals(this.buttonNo)) {
		    this.close();
		    return;
		} else if(event.getButton().equals(this.buttonYes)) {
		    ModelService modelService = new ModelService(ClouTreeSession.getInstance());
		    if(!modelService.deleteModel(this.model)) {
			Notification.show(this.model.getName() + " could not be deleted!", Notification.Type.ERROR_MESSAGE);
		    } else {
			Notification.show(this.model.getName() + " sucessfully deleted!", Notification.Type.HUMANIZED_MESSAGE);
			this.close();
			NavigationController.navigateToModel(null);
		    }
		}
    }
    
    private void close() {
		for (Window window : this.getUI().getWindows()) {
		    this.getUI().removeWindow(window);
		}
    }

}
