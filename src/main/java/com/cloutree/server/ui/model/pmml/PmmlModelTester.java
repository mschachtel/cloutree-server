
/**
 * Copyright 2013 Marc Schachtel, Germany
 */

package com.cloutree.server.ui.model.pmml;

import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import com.cloutree.modelevaluator.ModelTypes;
import com.cloutree.modelevaluator.PredictiveModel;
import com.cloutree.modelevaluator.PredictiveModelFactory;
import com.cloutree.modelevaluator.PredictiveModelResult;
import com.cloutree.server.config.CloutreeConfiguration;
import com.cloutree.server.persistence.entity.Model;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

/**
 * PmmlModelTester
 *
 * @author marc
 *
 * Since 15.08.2013
 */
public class PmmlModelTester extends CustomComponent implements Button.ClickListener {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private VerticalLayout mainLayout;

    @AutoGenerated
    private HorizontalLayout bottomLayout;

    @AutoGenerated
    private Button evalButton;

    @AutoGenerated
    private Panel resultPanel;

    @AutoGenerated
    private VerticalLayout resultPanelLayout;

    @AutoGenerated
    private TextArea resultTextArea;

    @AutoGenerated
    private Panel paramPanel;

    @AutoGenerated
    private VerticalLayout panelLayout;

    @AutoGenerated
    private VerticalLayout paramLayout;

    @AutoGenerated
    private Label lblSpacer;

    @AutoGenerated
    private Label lblUploadStatus;

    private static final long serialVersionUID = 1L;
    
    private Map<String, TextField> parameterFields;
    
    private PredictiveModel model;
    private String filePath;
    private Model modelEntity;
    
    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public PmmlModelTester() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		/* IMPLEMENTATION */
		this.resultTextArea.setReadOnly(true);
    }

    /* (non-Javadoc)
     * @see com.vaadin.ui.Button.ClickListener#buttonClick(com.vaadin.ui.Button.ClickEvent)
     */
    @Override
    public void buttonClick(ClickEvent event) {
	
		Map<String, Object> parameters = new HashMap<String, Object>();
		
		// Create parameter map
		Set<String> parameterNames = this.parameterFields.keySet();
		
		for(String param : parameterNames) {
		    TextField input = this.parameterFields.get(param);
		    parameters.put(param, input.getValue());
		}
		
		// Eval
		PredictiveModelResult result = this.model.eval(parameters);
		
		// Output
		StringBuilder builder = new StringBuilder();
		builder.append("Model: " + this.modelEntity.getName());
		builder.append("\n");
		builder.append("Preprocessor: " + this.model.getPreProcessor());
		builder.append("\n");
		builder.append("Postprocessor: " + this.model.getPostProcessor());
		builder.append("\n\n");
		builder.append("Result\n");
		builder.append("--------\n");
		builder.append(result.serialize(false));
		
		this.resultTextArea.setReadOnly(false);
		this.resultTextArea.setValue(builder.toString());
		this.resultTextArea.setReadOnly(true);

    }

    private void initiatePredictiveModel() {
	
		// Set File
    	String storagePath = CloutreeConfiguration.getProperty(CloutreeConfiguration.SERVER_STORAGE_PATH);
		File file = new File(storagePath + this.filePath);
		
		try {
		    this.model = PredictiveModelFactory.getPredictiveModel(ModelTypes.PMML, file);
		} catch (Exception e) {
		    Notification.show(e.getMessage(), Notification.Type.ERROR_MESSAGE);
		    return;
		}
		
		if(this.model == null) {
			Notification.show("Error occured while loading model", Notification.Type.ERROR_MESSAGE);
		    return;
		}
		
		Map<String, String> parameterSpecs = this.model.getParameterSpecs();
		Set<String> parameterNames = parameterSpecs.keySet();
		
		this.parameterFields = new HashMap<String, TextField>();
		
		for(String param : parameterNames) {
		    String type = parameterSpecs.get(param);
		    TextField input = new TextField();
		    input.setCaption(param + " (" + type + "):");
		    this.paramLayout.addComponent(input);
		    
		    // Store for eval
		    this.parameterFields.put(param, input);
		}
		
		if(this.modelEntity != null && this.modelEntity.getPreprocessor() != null) {
			this.model.setPreProcessor(this.modelEntity.getPreprocessor());
		}
		
		if(this.modelEntity != null && this.modelEntity.getPostprocessor() != null) {
			this.model.setPostProcessor(this.modelEntity.getPostprocessor());
		}
		
		this.evalButton.addClickListener(this);
	
    }

    public void setFile(String filePath) {
		this.filePath = filePath;
		this.initiatePredictiveModel();
    }

    @AutoGenerated
    private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// paramPanel
		paramPanel = buildParamPanel();
		mainLayout.addComponent(paramPanel);
		mainLayout.setExpandRatio(paramPanel, 1.0f);
		
		// bottomLayout
		bottomLayout = buildBottomLayout();
		mainLayout.addComponent(bottomLayout);
		
		return mainLayout;
    }

    @AutoGenerated
    private Panel buildParamPanel() {
		// common part: create layout
		paramPanel = new Panel();
		paramPanel.setCaption("Parameters:");
		paramPanel.setImmediate(false);
		paramPanel.setWidth("100.0%");
		paramPanel.setHeight("100.0%");
		
		// panelLayout
		panelLayout = buildPanelLayout();
		paramPanel.setContent(panelLayout);
		
		return paramPanel;
    }

    @AutoGenerated
    private VerticalLayout buildPanelLayout() {
		// common part: create layout
		panelLayout = new VerticalLayout();
		panelLayout.setImmediate(false);
		panelLayout.setWidth("100.0%");
		panelLayout.setHeight("100.0%");
		panelLayout.setMargin(false);
		
		// paramLayout
		paramLayout = buildParamLayout();
		panelLayout.addComponent(paramLayout);
		
		return panelLayout;
    }

    @AutoGenerated
    private VerticalLayout buildParamLayout() {
		// common part: create layout
		paramLayout = new VerticalLayout();
		paramLayout.setImmediate(false);
		paramLayout.setWidth("100.0%");
		paramLayout.setHeight("-1px");
		paramLayout.setMargin(true);
		paramLayout.setSpacing(true);
		
		// lblUploadStatus
		lblUploadStatus = new Label();
		lblUploadStatus.setImmediate(false);
		lblUploadStatus.setWidth("-1px");
		lblUploadStatus.setHeight("-1px");
		lblUploadStatus.setValue(" ");
		paramLayout.addComponent(lblUploadStatus);
		
		// lblSpacer
		lblSpacer = new Label();
		lblSpacer.setImmediate(false);
		lblSpacer.setWidth("-1px");
		lblSpacer.setHeight("-1px");
		lblSpacer.setValue(" ");
		paramLayout.addComponent(lblSpacer);
		
		return paramLayout;
    }

    @AutoGenerated
    private HorizontalLayout buildBottomLayout() {
		// common part: create layout
		bottomLayout = new HorizontalLayout();
		bottomLayout.setImmediate(false);
		bottomLayout.setWidth("100.0%");
		bottomLayout.setHeight("150px");
		bottomLayout.setMargin(false);
		bottomLayout.setSpacing(true);
		
		// resultPanel
		resultPanel = buildResultPanel();
		bottomLayout.addComponent(resultPanel);
		bottomLayout.setExpandRatio(resultPanel, 1.0f);
		
		// evalButton
		evalButton = new Button();
		evalButton.setCaption("Evaluate");
		evalButton.setImmediate(true);
		evalButton.setWidth("-1px");
		evalButton.setHeight("-1px");
		bottomLayout.addComponent(evalButton);
		bottomLayout.setComponentAlignment(evalButton, new Alignment(10));
		
		return bottomLayout;
    }

    @AutoGenerated
    private Panel buildResultPanel() {
		// common part: create layout
		resultPanel = new Panel();
		resultPanel.setCaption("Test Result:");
		resultPanel.setImmediate(false);
		resultPanel.setWidth("100.0%");
		resultPanel.setHeight("100.0%");
		
		// resultPanelLayout
		resultPanelLayout = buildResultPanelLayout();
		resultPanel.setContent(resultPanelLayout);
		
		return resultPanel;
    }

    @AutoGenerated
    private VerticalLayout buildResultPanelLayout() {
		// common part: create layout
		resultPanelLayout = new VerticalLayout();
		resultPanelLayout.setImmediate(false);
		resultPanelLayout.setWidth("100.0%");
		resultPanelLayout.setHeight("100.0%");
		resultPanelLayout.setMargin(false);
		
		// resultTextArea
		resultTextArea = new TextArea();
		resultTextArea.setImmediate(false);
		resultTextArea.setWidth("100.0%");
		resultTextArea.setHeight("100.0%");
		resultPanelLayout.addComponent(resultTextArea);
		
		return resultPanelLayout;
    }

	/**
	 * @return the modelEntity
	 */
	public Model getModelEntity() {
		return modelEntity;
	}

	/**
	 * @param modelEntity the modelEntity to set
	 */
	public void setModelEntity(Model modelEntity) {
		this.modelEntity = modelEntity;
	}
    
}
