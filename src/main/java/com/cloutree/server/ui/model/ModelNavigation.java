
/**
 * Copyright 2013 Marc Schachtel, Germany
 */

package com.cloutree.server.ui.model;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.cloutree.server.permission.UserManager;
import com.cloutree.server.persistence.entity.Model;
import com.cloutree.server.persistence.service.ModelService;
import com.cloutree.server.session.ClouTreeSession;
import com.cloutree.server.ui.navigation.NavigationController;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

/**
 * ModelNavigation
 *
 * @author marc
 *
 * Since 18.08.2013
 */
public class ModelNavigation extends CustomComponent implements View, Button.ClickListener {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private AbsoluteLayout mainLayout;

    @AutoGenerated
    private VerticalLayout modelNavigatorLayout;

    @AutoGenerated
    private HorizontalLayout buttonLayout;

    @AutoGenerated
    private Button buttonAddModel;

    @AutoGenerated
    private Button buttonDeleteModel;

    @AutoGenerated
    private Table modelTable;

    private static final long serialVersionUID = 1L;
    
    private Map<Item, Model> loadedModels;
    private Model selectedModel;
    
    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public ModelNavigation() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	
		// IMPLEMENTATION
		
		this.buttonAddModel.addClickListener(this);
		this.buttonDeleteModel.addClickListener(this);
		
		if(!UserManager.getCurrentUser().hasWritePermission()) {
		    this.buttonAddModel.setEnabled(false);
		    this.buttonDeleteModel.setEnabled(false);
		}
	
    }

    @SuppressWarnings({ "unchecked", "deprecation" })
    public void initModels() {
	
		ModelService modelService = new ModelService(ClouTreeSession.getInstance());
		List<Model> userModels = modelService.getAllAvailableModels();
		this.loadedModels = new HashMap<Item, Model>();
		
		if (this.selectedModel == null) {
		    this.buttonDeleteModel.setEnabled(false);
		}
		
		if(userModels == null) {
		    return;
		}
		
		this.modelTable.setImmediate(true);
		this.modelTable.setEnabled(true);
		this.modelTable.setSelectable(true);
		this.modelTable.setSortEnabled(false);
		
		this.modelTable.addContainerProperty("Model", String.class,  null);
		this.modelTable.addContainerProperty("Type", String.class,  null);
		this.modelTable.addContainerProperty("Revision", Integer.class,  null);
		this.modelTable.addContainerProperty("Released", Boolean.class,  null);
	
		for(Model model : userModels) {
		    
		    Item item = this.modelTable.addItem(model.getName());
		    item.getItemProperty("Model").setValue(model.getName());
		    item.getItemProperty("Type").setValue(model.getType());
		    item.getItemProperty("Revision").setValue(model.getActiveVersion());
		    item.getItemProperty("Released").setValue(model.getReleased());
		    
		    this.loadedModels.put(item, model);
	
		}
		
		this.modelTable.setPageLength(0);
		
		this.modelTable.addListener(new ItemClickEvent.ItemClickListener() {
			private static final long serialVersionUID = 2068314108919135281L;
			public void itemClick(ItemClickEvent event) {
				
			    Item item = event.getItem();
			    Model model = loadedModels.get(item);
			    
			    selectedModel = model;
			    
			    if(UserManager.getCurrentUser().hasWritePermission()) {
				buttonDeleteModel.setEnabled(true);
			    }
			    
			    NavigationController.navigateToModel(model.getName());
				
			}
		});
	
    }

    /* (non-Javadoc)
     * @see com.vaadin.navigator.View#enter(com.vaadin.navigator.ViewChangeListener.ViewChangeEvent)
     */
    @Override
    public void enter(ViewChangeEvent event) {
    	// Nothing to do here
    }
    
    public void setSelectedModel(String modelName) {
		this.modelTable.select(modelName);
		this.modelTable.focus();
		Item item = this.modelTable.getItem(modelName);
		Model model = this.loadedModels.get(item);
		this.selectedModel = model;
		this.buttonDeleteModel.setEnabled(true);
    }

    /* (non-Javadoc)
     * @see com.vaadin.ui.Button.ClickListener#buttonClick(com.vaadin.ui.Button.ClickEvent)
     */
    @Override
    public void buttonClick(ClickEvent event) {
	
		VerticalLayout layout = new VerticalLayout();
		layout.setMargin(false);
		layout.setSpacing(false);
		layout.setSizeFull();
		
		Window dialog = new Window();
		dialog.center();
		dialog.setModal(true);
		dialog.setHeight("250px");
		dialog.setWidth("400px");
		dialog.setResizable(false);
		
		if(event.getButton().equals(this.buttonAddModel)) {
		    ModelCreator creator = new ModelCreator();
		    creator.setSizeFull();
		    layout.addComponent(creator);
		    dialog.setCaption("Add Model?");
		} else if(event.getButton().equals(this.buttonDeleteModel)) {
		    ModelDeleter deleter = new ModelDeleter();
		    deleter.setSizeFull();
		    deleter.setModel(this.selectedModel);
		    layout.addComponent(deleter);
		    dialog.setCaption("Delete Model?");
		}
	
		dialog.setContent(layout);
		this.getUI().addWindow(dialog);
	
    }

    @AutoGenerated
    private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// modelNavigatorLayout
		modelNavigatorLayout = buildModelNavigatorLayout();
		mainLayout.addComponent(modelNavigatorLayout,
			"top:0.0px;right:0.0px;bottom:0.0px;left:0.0px;");
		
		return mainLayout;
    }

    @AutoGenerated
    private VerticalLayout buildModelNavigatorLayout() {
		// common part: create layout
		modelNavigatorLayout = new VerticalLayout();
		modelNavigatorLayout.setImmediate(false);
		modelNavigatorLayout.setWidth("100.0%");
		modelNavigatorLayout.setHeight("100.0%");
		modelNavigatorLayout.setMargin(false);
		modelNavigatorLayout.setSpacing(true);
		
		// modelTable
		modelTable = new Table();
		modelTable.setImmediate(false);
		modelTable.setWidth("100.0%");
		modelTable.setHeight("100.0%");
		modelNavigatorLayout.addComponent(modelTable);
		modelNavigatorLayout.setExpandRatio(modelTable, 1.0f);
		
		// buttonLayout
		buttonLayout = buildButtonLayout();
		modelNavigatorLayout.addComponent(buttonLayout);
		modelNavigatorLayout.setComponentAlignment(buttonLayout, new Alignment(
			10));
		
		return modelNavigatorLayout;
    }

    @AutoGenerated
    private HorizontalLayout buildButtonLayout() {
		// common part: create layout
		buttonLayout = new HorizontalLayout();
		buttonLayout.setImmediate(false);
		buttonLayout.setWidth("-1px");
		buttonLayout.setHeight("-1px");
		buttonLayout.setMargin(false);
		buttonLayout.setSpacing(true);
		
		// buttonDeleteModel
		buttonDeleteModel = new Button();
		buttonDeleteModel.setCaption("Delete Model");
		buttonDeleteModel.setImmediate(true);
		buttonDeleteModel.setWidth("-1px");
		buttonDeleteModel.setHeight("-1px");
		buttonLayout.addComponent(buttonDeleteModel);
		
		// buttonAddModel
		buttonAddModel = new Button();
		buttonAddModel.setCaption("Add Model");
		buttonAddModel.setImmediate(true);
		buttonAddModel.setWidth("-1px");
		buttonAddModel.setHeight("-1px");
		buttonLayout.addComponent(buttonAddModel);
		
		return buttonLayout;
    }

}
