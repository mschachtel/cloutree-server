
/**
 * Copyright 2013 Marc Schachtel, Germany
 */

package com.cloutree.server.ui.model;

import java.io.File;

import com.cloutree.modelevaluator.ModelTypes;
import com.cloutree.server.permission.UserManager;
import com.cloutree.server.persistence.entity.Model;
import com.cloutree.server.persistence.service.ModelService;
import com.cloutree.server.session.ClouTreeSession;
import com.cloutree.server.ui.navigation.NavigationController;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FileResource;
import com.vaadin.server.ThemeResource;
import com.vaadin.server.VaadinService;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.VerticalLayout;

/**
 * ModelEditorUI
 *
 * @author marc
 *
 * Since 26.08.2013
 */
public class ModelEditorUI extends CustomComponent implements View, ValueChangeListener, Button.ClickListener {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private TabSheet editorTabSheet;

	@AutoGenerated
	private AbsoluteLayout rProcessingLayout;

	@AutoGenerated
	private AbsoluteLayout pmmlProcessingLayout;

	@AutoGenerated
	private HorizontalLayout dataProcessingHorizontal;

	@AutoGenerated
	private VerticalLayout dataProcessingVerticalLayout;

	@AutoGenerated
	private VerticalLayout postProcessorLayout;

	@AutoGenerated
	private Button postProcessorSaveButton;

	@AutoGenerated
	private Panel postProcessorScriptPanel;

	@AutoGenerated
	private VerticalLayout postProcessorScriptLayout;

	@AutoGenerated
	private TextArea textAreaPostScript;

	@AutoGenerated
	private VerticalLayout preProcessorLayout;

	@AutoGenerated
	private Button preProcessorSaveButton;

	@AutoGenerated
	private Panel preProcessorScriptPanel;

	@AutoGenerated
	private VerticalLayout preProcessorScriptLayout;

	@AutoGenerated
	private TextArea textAreaPreScript;

	@AutoGenerated
	private AbsoluteLayout modelEditorEditingLayout;

	@AutoGenerated
	private VerticalLayout modelEditingVerticalLayout;

	@AutoGenerated
	private ModelFileList modelFileList;

	@AutoGenerated
	private HorizontalLayout modelParametersLayout;

	@AutoGenerated
	private Embedded embeddedTypeLogo;

	@AutoGenerated
	private CheckBox checkBoxModelActive;

	private Model model;

    private static final long serialVersionUID = 1L;
    
    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public ModelEditorUI() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	
		// IMPLEMENTATION
		this.editorTabSheet.removeTab(this.editorTabSheet.getTab(this.pmmlProcessingLayout));
		this.editorTabSheet.removeTab(this.editorTabSheet.getTab(this.rProcessingLayout));
		
		this.preProcessorSaveButton.addClickListener(this);
		this.postProcessorSaveButton.addClickListener(this);
		
		if(!UserManager.getCurrentUser().hasWritePermission()) {
		    this.checkBoxModelActive.setEnabled(false);
		    this.textAreaPostScript.setEnabled(false);
		    this.textAreaPreScript.setEnabled(false);
		    this.postProcessorSaveButton.setEnabled(false);
		    this.preProcessorSaveButton.setEnabled(false);
		}
    }
    
    public void init(String modelName) throws Exception {
	
		ModelService modelService = new ModelService(ClouTreeSession.getInstance());
		this.model = modelService.getModelByName(modelName);
		
		if(this.model == null ) {
		    throw new Exception("Model is not set");
		}
	
		this.checkBoxModelActive.setValue(this.model.getReleased());
		this.checkBoxModelActive.setCaption(this.model.getName());
				
		
		// INIT PROCESSING LAYOUTS
		if(this.model.getType().equals(ModelTypes.PMML.toString())) {
			this.initPmmlProcessingLayout();
		}
		
		// TODO When R is implemented
//		if(this.model.getType().equals(ModelTypes.NativeR.toString())) {
//			this.initRProcessingLayout();
//		}
		
		this.modelFileList.setModel(this.model);
		this.modelFileList.init();
		this.checkBoxModelActive.addValueChangeListener(this);
		this.checkBoxModelActive.setImmediate(true);
		
		// Set type Logo
		String basepath = VaadinService.getCurrent().getBaseDirectory().getAbsolutePath();
		FileResource resourceTypeLogo = new FileResource(new File(basepath + "/WEB-INF/images/modeltypes/" + this.model.getType() + ".png"));
		if(resourceTypeLogo.getSourceFile().exists()) {
			embeddedTypeLogo.setSource(resourceTypeLogo);
			embeddedTypeLogo.setImmediate(true);
		}
				
    }
    
    private void initPmmlProcessingLayout() {
    	if(this.model.getPostprocessor() != null && !this.model.getPostprocessor().isEmpty())
			this.textAreaPostScript.setValue(this.model.getPostprocessor());
			
		if(this.model.getPreprocessor() != null && !this.model.getPreprocessor().isEmpty())
			this.textAreaPreScript.setValue(this.model.getPreprocessor());
		
		this.editorTabSheet.addTab(this.pmmlProcessingLayout, "Data Processing");
    }
    
    @SuppressWarnings("unused")
	private void initRProcessingLayout() {
    	
    	this.editorTabSheet.addTab(this.rProcessingLayout, "Data Processing");
    	
    	// TODO
    	
    }

    /* (non-Javadoc)
     * @see com.vaadin.navigator.View#enter(com.vaadin.navigator.ViewChangeListener.ViewChangeEvent)
     */
    @Override
    public void enter(ViewChangeEvent event) {
	// Nothing to do
    }

    @Override
    public void valueChange(ValueChangeEvent event) {
	
	if(this.model != null) {
	    ModelService modelService = new ModelService(ClouTreeSession.getInstance());
	    this.model.setReleased(this.checkBoxModelActive.getValue());
	    if(!modelService.updateModel(this.model)){
		Notification.show("Unable to store model", Notification.Type.ERROR_MESSAGE);
	    } else {
		NavigationController.navigateToModel(this.model.getName());
	    }
	}
	
    }

    /* (non-Javadoc)
     * @see com.vaadin.ui.Button.ClickListener#buttonClick(com.vaadin.ui.Button.ClickEvent)
     */
    @Override
    public void buttonClick(ClickEvent event) {
	if(this.model != null) {
	    ModelService modelService = new ModelService(ClouTreeSession.getInstance());
	    
	    if(event.getButton().equals(this.preProcessorSaveButton)) {
		this.model.setPreprocessor(this.textAreaPreScript.getValue());
		Notification.show("Preprocessor saved succesfully!", Notification.Type.HUMANIZED_MESSAGE);
	    } else if(event.getButton().equals(this.postProcessorSaveButton)) {
		this.model.setPostprocessor(this.textAreaPostScript.getValue());
		Notification.show("Postprocessor saved succesfully!", Notification.Type.HUMANIZED_MESSAGE);
	    } else {
		return;
	    }

	    if(!modelService.updateModel(this.model)){
		Notification.show("Unable to store model", Notification.Type.ERROR_MESSAGE);
	    }
	}
    }

    @AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// editorTabSheet
		editorTabSheet = buildEditorTabSheet();
		mainLayout.addComponent(editorTabSheet,
				"top:0.0px;right:0.0px;bottom:0.0px;left:0.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private TabSheet buildEditorTabSheet() {
		// common part: create layout
		editorTabSheet = new TabSheet();
		editorTabSheet.setImmediate(true);
		editorTabSheet.setWidth("100.0%");
		editorTabSheet.setHeight("100.0%");
		
		// modelEditorEditingLayout
		modelEditorEditingLayout = buildModelEditorEditingLayout();
		editorTabSheet.addTab(modelEditorEditingLayout, "Model Editor", null);
		
		// pmmlProcessingLayout
		pmmlProcessingLayout = buildPmmlProcessingLayout();
		editorTabSheet.addTab(pmmlProcessingLayout, "PMML Processing", null);
		
		// rProcessingLayout
		rProcessingLayout = new AbsoluteLayout();
		rProcessingLayout.setImmediate(false);
		rProcessingLayout.setWidth("-1px");
		rProcessingLayout.setHeight("-1px");
		editorTabSheet.addTab(rProcessingLayout, "R Processing", null);
		
		return editorTabSheet;
	}

	@AutoGenerated
	private AbsoluteLayout buildModelEditorEditingLayout() {
		// common part: create layout
		modelEditorEditingLayout = new AbsoluteLayout();
		modelEditorEditingLayout.setImmediate(false);
		modelEditorEditingLayout.setWidth("100.0%");
		modelEditorEditingLayout.setHeight("100.0%");
		
		// modelEditingVerticalLayout
		modelEditingVerticalLayout = buildModelEditingVerticalLayout();
		modelEditorEditingLayout.addComponent(modelEditingVerticalLayout,
				"top:0.0px;right:0.0px;bottom:0.0px;left:0.0px;");
		
		return modelEditorEditingLayout;
	}

	@AutoGenerated
	private VerticalLayout buildModelEditingVerticalLayout() {
		// common part: create layout
		modelEditingVerticalLayout = new VerticalLayout();
		modelEditingVerticalLayout.setImmediate(false);
		modelEditingVerticalLayout.setWidth("100.0%");
		modelEditingVerticalLayout.setHeight("100.0%");
		modelEditingVerticalLayout.setMargin(true);
		modelEditingVerticalLayout.setSpacing(true);
		
		// modelParametersLayout
		modelParametersLayout = buildModelParametersLayout();
		modelEditingVerticalLayout.addComponent(modelParametersLayout);
		
		// modelFileList
		modelFileList = new ModelFileList();
		modelFileList.setImmediate(false);
		modelFileList.setWidth("100.0%");
		modelFileList.setHeight("100.0%");
		modelEditingVerticalLayout.addComponent(modelFileList);
		modelEditingVerticalLayout.setExpandRatio(modelFileList, 1.0f);
		
		return modelEditingVerticalLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildModelParametersLayout() {
		// common part: create layout
		modelParametersLayout = new HorizontalLayout();
		modelParametersLayout.setImmediate(false);
		modelParametersLayout.setWidth("100.0%");
		modelParametersLayout.setHeight("-1px");
		modelParametersLayout.setMargin(false);
		modelParametersLayout.setSpacing(true);
		
		// checkBoxModelActive
		checkBoxModelActive = new CheckBox();
		checkBoxModelActive.setCaption("CheckBox");
		checkBoxModelActive.setImmediate(false);
		checkBoxModelActive.setWidth("-1px");
		checkBoxModelActive.setHeight("-1px");
		modelParametersLayout.addComponent(checkBoxModelActive);
		modelParametersLayout.setComponentAlignment(checkBoxModelActive,
				new Alignment(9));
		
		// embeddedTypeLogo
		embeddedTypeLogo = new Embedded();
		embeddedTypeLogo.setImmediate(false);
		embeddedTypeLogo.setWidth("-1px");
		embeddedTypeLogo.setHeight("54px");
		embeddedTypeLogo.setSource(new ThemeResource(
				"img/component/embedded_icon.png"));
		embeddedTypeLogo.setType(1);
		embeddedTypeLogo.setMimeType("image/png");
		modelParametersLayout.addComponent(embeddedTypeLogo);
		modelParametersLayout.setExpandRatio(embeddedTypeLogo, 1.0f);
		modelParametersLayout.setComponentAlignment(embeddedTypeLogo,
				new Alignment(10));
		
		return modelParametersLayout;
	}

	@AutoGenerated
	private AbsoluteLayout buildPmmlProcessingLayout() {
		// common part: create layout
		pmmlProcessingLayout = new AbsoluteLayout();
		pmmlProcessingLayout.setImmediate(false);
		pmmlProcessingLayout.setWidth("100.0%");
		pmmlProcessingLayout.setHeight("100.0%");
		
		// dataProcessingHorizontal
		dataProcessingHorizontal = buildDataProcessingHorizontal();
		pmmlProcessingLayout.addComponent(dataProcessingHorizontal,
				"top:0.0px;right:0.0px;bottom:0.0px;left:0.0px;");
		
		return pmmlProcessingLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildDataProcessingHorizontal() {
		// common part: create layout
		dataProcessingHorizontal = new HorizontalLayout();
		dataProcessingHorizontal.setImmediate(false);
		dataProcessingHorizontal.setWidth("100.0%");
		dataProcessingHorizontal.setHeight("100.0%");
		dataProcessingHorizontal.setMargin(false);
		
		// dataProcessingVerticalLayout
		dataProcessingVerticalLayout = buildDataProcessingVerticalLayout();
		dataProcessingHorizontal.addComponent(dataProcessingVerticalLayout);
		dataProcessingHorizontal.setExpandRatio(dataProcessingVerticalLayout,
				1.0f);
		
		return dataProcessingHorizontal;
	}

	@AutoGenerated
	private VerticalLayout buildDataProcessingVerticalLayout() {
		// common part: create layout
		dataProcessingVerticalLayout = new VerticalLayout();
		dataProcessingVerticalLayout.setImmediate(false);
		dataProcessingVerticalLayout.setWidth("100.0%");
		dataProcessingVerticalLayout.setHeight("100.0%");
		dataProcessingVerticalLayout.setMargin(true);
		dataProcessingVerticalLayout.setSpacing(true);
		
		// preProcessorLayout
		preProcessorLayout = buildPreProcessorLayout();
		dataProcessingVerticalLayout.addComponent(preProcessorLayout);
		
		// postProcessorLayout
		postProcessorLayout = buildPostProcessorLayout();
		dataProcessingVerticalLayout.addComponent(postProcessorLayout);
		
		return dataProcessingVerticalLayout;
	}

	@AutoGenerated
	private VerticalLayout buildPreProcessorLayout() {
		// common part: create layout
		preProcessorLayout = new VerticalLayout();
		preProcessorLayout.setImmediate(false);
		preProcessorLayout.setWidth("100.0%");
		preProcessorLayout.setHeight("100.0%");
		preProcessorLayout.setMargin(true);
		preProcessorLayout.setSpacing(true);
		
		// preProcessorScriptPanel
		preProcessorScriptPanel = buildPreProcessorScriptPanel();
		preProcessorLayout.addComponent(preProcessorScriptPanel);
		preProcessorLayout.setExpandRatio(preProcessorScriptPanel, 1.0f);
		
		// preProcessorSaveButton
		preProcessorSaveButton = new Button();
		preProcessorSaveButton.setCaption("Save");
		preProcessorSaveButton.setImmediate(true);
		preProcessorSaveButton.setWidth("-1px");
		preProcessorSaveButton.setHeight("-1px");
		preProcessorLayout.addComponent(preProcessorSaveButton);
		preProcessorLayout.setComponentAlignment(preProcessorSaveButton,
				new Alignment(6));
		
		return preProcessorLayout;
	}

	@AutoGenerated
	private Panel buildPreProcessorScriptPanel() {
		// common part: create layout
		preProcessorScriptPanel = new Panel();
		preProcessorScriptPanel.setCaption("JavaScript Pre-Processor:");
		preProcessorScriptPanel.setImmediate(false);
		preProcessorScriptPanel.setWidth("100.0%");
		preProcessorScriptPanel.setHeight("100.0%");
		
		// preProcessorScriptLayout
		preProcessorScriptLayout = buildPreProcessorScriptLayout();
		preProcessorScriptPanel.setContent(preProcessorScriptLayout);
		
		return preProcessorScriptPanel;
	}

	@AutoGenerated
	private VerticalLayout buildPreProcessorScriptLayout() {
		// common part: create layout
		preProcessorScriptLayout = new VerticalLayout();
		preProcessorScriptLayout.setImmediate(false);
		preProcessorScriptLayout.setWidth("100.0%");
		preProcessorScriptLayout.setHeight("100.0%");
		preProcessorScriptLayout.setMargin(false);
		
		// textAreaPreScript
		textAreaPreScript = new TextArea();
		textAreaPreScript.setImmediate(false);
		textAreaPreScript.setWidth("100.0%");
		textAreaPreScript.setHeight("100.0%");
		preProcessorScriptLayout.addComponent(textAreaPreScript);
		
		return preProcessorScriptLayout;
	}

	@AutoGenerated
	private VerticalLayout buildPostProcessorLayout() {
		// common part: create layout
		postProcessorLayout = new VerticalLayout();
		postProcessorLayout.setImmediate(false);
		postProcessorLayout.setWidth("100.0%");
		postProcessorLayout.setHeight("100.0%");
		postProcessorLayout.setMargin(true);
		postProcessorLayout.setSpacing(true);
		
		// postProcessorScriptPanel
		postProcessorScriptPanel = buildPostProcessorScriptPanel();
		postProcessorLayout.addComponent(postProcessorScriptPanel);
		postProcessorLayout.setExpandRatio(postProcessorScriptPanel, 1.0f);
		
		// postProcessorSaveButton
		postProcessorSaveButton = new Button();
		postProcessorSaveButton.setCaption("Save");
		postProcessorSaveButton.setImmediate(true);
		postProcessorSaveButton.setWidth("-1px");
		postProcessorSaveButton.setHeight("-1px");
		postProcessorLayout.addComponent(postProcessorSaveButton);
		postProcessorLayout.setComponentAlignment(postProcessorSaveButton,
				new Alignment(6));
		
		return postProcessorLayout;
	}

	@AutoGenerated
	private Panel buildPostProcessorScriptPanel() {
		// common part: create layout
		postProcessorScriptPanel = new Panel();
		postProcessorScriptPanel.setCaption("JavaScript Post-Processor:");
		postProcessorScriptPanel.setImmediate(false);
		postProcessorScriptPanel.setWidth("100.0%");
		postProcessorScriptPanel.setHeight("100.0%");
		
		// postProcessorScriptLayout
		postProcessorScriptLayout = buildPostProcessorScriptLayout();
		postProcessorScriptPanel.setContent(postProcessorScriptLayout);
		
		return postProcessorScriptPanel;
	}

	@AutoGenerated
	private VerticalLayout buildPostProcessorScriptLayout() {
		// common part: create layout
		postProcessorScriptLayout = new VerticalLayout();
		postProcessorScriptLayout.setImmediate(false);
		postProcessorScriptLayout.setWidth("100.0%");
		postProcessorScriptLayout.setHeight("100.0%");
		postProcessorScriptLayout.setMargin(false);
		
		// textAreaPostScript
		textAreaPostScript = new TextArea();
		textAreaPostScript.setImmediate(false);
		textAreaPostScript.setWidth("100.0%");
		textAreaPostScript.setHeight("100.0%");
		postProcessorScriptLayout.addComponent(textAreaPostScript);
		postProcessorScriptLayout.setExpandRatio(textAreaPostScript, 1.0f);
		
		return postProcessorScriptLayout;
	}
    
}
