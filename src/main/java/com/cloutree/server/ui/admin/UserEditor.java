
/**
 * Copyright 2013 Marc Schachtel, Germany
 */

package com.cloutree.server.ui.admin;

import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.cloutree.server.permission.PasswordService;
import com.cloutree.server.permission.Permissions;
import com.cloutree.server.permission.UserManager;
import com.cloutree.server.persistence.entity.User;
import com.cloutree.server.session.ClouTreeSession;
import com.cloutree.server.ui.navigation.NavigationController;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

/**
 * TODO
 *
 * @author marc
 *
 * Since 10.09.2013
 */
public class UserEditor extends CustomComponent implements View, Button.ClickListener {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    static Logger log = Logger.getLogger(UserEditor.class.getName());
    
    private static final long serialVersionUID = 1L;
    
    @AutoGenerated
    private AbsoluteLayout mainLayout;
    @AutoGenerated
    private Panel userEditorPanel;
    @AutoGenerated
    private VerticalLayout userEditorPanelLayout;
    @AutoGenerated
    private Button buttonSave;
    @AutoGenerated
    private VerticalLayout permissionsLayout;
    @AutoGenerated
    private ListSelect listPermissions;
    @AutoGenerated
    private GridLayout userFieldGrid;
    @AutoGenerated
    private PasswordField passPassword;
    @AutoGenerated
    private TextField textEmail;
    @AutoGenerated
    private TextField textFirstName;
    @AutoGenerated
    private TextField textName;
    @AutoGenerated
    private CheckBox checkActive;
    @AutoGenerated
    private TextField textUserName;
    private User user;
    
    private String initialPassword;
    
    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public UserEditor() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	
		// Implementation
		
		if(!UserManager.getCurrentUser().hasWritePermission()) {
		    NavigationController.navigateToModel(null);
		}
		
		this.listPermissions.addItem(Permissions.SUPERUSER);
		this.listPermissions.addItem(Permissions.DEVELOPER);
		this.listPermissions.addItem(Permissions.API);
		
		this.listPermissions.setNullSelectionAllowed(false);
		this.listPermissions.setMultiSelect(true);
		
		this.buttonSave.addClickListener(this);
    }

    public void setUser(Integer id) {
    	User user = UserManager.getUser(id);
    	this.user = user;
    }
    
    public void init() {
	
		if(user == null) {
		    return;
		}
		
		this.textUserName.setValue(user.getUsername());
		this.textUserName.setReadOnly(true);
		
		this.passPassword.setValue(user.getPassword().toString());
		this.initialPassword = user.getPassword().toString();
		
		this.textFirstName.setValue(user.getFirstname());
		this.textName.setValue(user.getName());
		this.textEmail.setValue(user.getEmail());
		this.checkActive.setValue(user.getActive());
		
		for(Permissions permission : user.getPermissionList()) {
		    this.listPermissions.select(permission);
		}
		
    }
    
    @Override
    public void enter(ViewChangeEvent event) {
    	// Nothing to do here?
    }

    @AutoGenerated
    private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// userEditorPanel
		userEditorPanel = buildUserEditorPanel();
		mainLayout.addComponent(userEditorPanel,
			"top:0.0px;right:0.0px;bottom:0.0px;left:0.0px;");
		
		return mainLayout;
    }

    @AutoGenerated
    private Panel buildUserEditorPanel() {
		// common part: create layout
		userEditorPanel = new Panel();
		userEditorPanel.setImmediate(false);
		userEditorPanel.setWidth("100.0%");
		userEditorPanel.setHeight("100.0%");
		
		// userEditorPanelLayout
		userEditorPanelLayout = buildUserEditorPanelLayout();
		userEditorPanel.setContent(userEditorPanelLayout);
		
		return userEditorPanel;
    }

    @AutoGenerated
    private VerticalLayout buildUserEditorPanelLayout() {
		// common part: create layout
		userEditorPanelLayout = new VerticalLayout();
		userEditorPanelLayout.setImmediate(false);
		userEditorPanelLayout.setWidth("100.0%");
		userEditorPanelLayout.setHeight("100.0%");
		userEditorPanelLayout.setMargin(true);
		userEditorPanelLayout.setSpacing(true);
		
		// userFieldGrid
		userFieldGrid = buildUserFieldGrid();
		userEditorPanelLayout.addComponent(userFieldGrid);
		
		// permissionsLayout
		permissionsLayout = buildPermissionsLayout();
		userEditorPanelLayout.addComponent(permissionsLayout);
		userEditorPanelLayout.setExpandRatio(permissionsLayout, 1.0f);
		
		// buttonSave
		buttonSave = new Button();
		buttonSave.setCaption("Save");
		buttonSave.setImmediate(true);
		buttonSave.setWidth("-1px");
		buttonSave.setHeight("-1px");
		userEditorPanelLayout.addComponent(buttonSave);
		userEditorPanelLayout.setComponentAlignment(buttonSave, new Alignment(
			10));
		
		return userEditorPanelLayout;
    }

    @AutoGenerated
    private GridLayout buildUserFieldGrid() {
		// common part: create layout
		userFieldGrid = new GridLayout();
		userFieldGrid.setImmediate(false);
		userFieldGrid.setWidth("100.0%");
		userFieldGrid.setHeight("-1px");
		userFieldGrid.setMargin(false);
		userFieldGrid.setSpacing(true);
		userFieldGrid.setColumns(2);
		userFieldGrid.setRows(3);
		
		// textUserName
		textUserName = new TextField();
		textUserName.setCaption("Username: ");
		textUserName.setImmediate(false);
		textUserName.setWidth("100.0%");
		textUserName.setHeight("-1px");
		userFieldGrid.addComponent(textUserName, 0, 0);
		
		// checkBox_1
		checkActive = new CheckBox();
		checkActive.setCaption("Active");
		checkActive.setImmediate(false);
		checkActive.setWidth("-1px");
		checkActive.setHeight("-1px");
		userFieldGrid.addComponent(checkActive, 1, 0);
		userFieldGrid.setComponentAlignment(checkActive, new Alignment(10));
		
		// textName
		textName = new TextField();
		textName.setCaption("Name: ");
		textName.setImmediate(false);
		textName.setWidth("100.0%");
		textName.setHeight("-1px");
		userFieldGrid.addComponent(textName, 0, 1);
		
		// textFirstName
		textFirstName = new TextField();
		textFirstName.setCaption("First Name:");
		textFirstName.setImmediate(false);
		textFirstName.setWidth("100.0%");
		textFirstName.setHeight("-1px");
		userFieldGrid.addComponent(textFirstName, 1, 1);
		
		// textEmail
		textEmail = new TextField();
		textEmail.setCaption("E-Mail:");
		textEmail.setImmediate(false);
		textEmail.setWidth("100.0%");
		textEmail.setHeight("-1px");
		userFieldGrid.addComponent(textEmail, 0, 2);
		
		// passPassword
		passPassword = new PasswordField();
		passPassword.setCaption("Password: ");
		passPassword.setImmediate(false);
		passPassword.setWidth("100.0%");
		passPassword.setHeight("-1px");
		userFieldGrid.addComponent(passPassword, 1, 2);
		
		return userFieldGrid;
    }

    @AutoGenerated
    private VerticalLayout buildPermissionsLayout() {
		// common part: create layout
		permissionsLayout = new VerticalLayout();
		permissionsLayout.setImmediate(false);
		permissionsLayout.setWidth("100.0%");
		permissionsLayout.setHeight("100.0%");
		permissionsLayout.setMargin(false);
		
		// listPermissions
		listPermissions = new ListSelect();
		listPermissions.setCaption("Permissions:");
		listPermissions.setImmediate(false);
		listPermissions.setWidth("100.0%");
		listPermissions.setHeight("100.0%");
		permissionsLayout.addComponent(listPermissions);
		
		return permissionsLayout;
    }

    @Override
    public void buttonClick(ClickEvent event) {
	
		boolean newUser = false;
		
		PasswordService passService = new PasswordService();
		byte[] salt;
		try {
		    salt = passService.generateSalt();
		} catch (NoSuchAlgorithmException e1) {
		    log.log(Level.WARNING, e1.getMessage());
			return;
		}
		
		if(user == null) {
		    this.user = new User();
		    this.user.setId(0); // AUTO_INCREMENT
		    newUser = true;
		}
		
		if(newUser || !user.getPassword().toString().equals(this.initialPassword)) {
		    byte[] pass;
		    try {
			pass = passService.getEncryptedPassword(this.passPassword.getValue(), salt);
		    } catch (NoSuchAlgorithmException e) {
			log.log(Level.WARNING, e.getMessage());
			return;
		    } catch (InvalidKeySpecException e) {
			log.log(Level.WARNING, e.getMessage());
			return;
		    }
		    this.user.setPassword(pass);
		    this.user.setSalt(salt);
		}
		
		this.user.setUsername(this.textUserName.getValue());
		this.user.setTenant(ClouTreeSession.getUser().getTenant());
		this.user.setActive(this.checkActive.getValue());
		this.user.setEmail(this.textEmail.getValue());
		this.user.setFirstname(this.textFirstName.getValue());
		this.user.setName(this.textName.getValue());
		
		//permissions
		@SuppressWarnings("unchecked")
		Set<Permissions> selectedItems = (Set<Permissions>)this.listPermissions.getValue();
		String permissions ="";
		int i = 0;
		for(Permissions permission : selectedItems) {
		    permissions = permissions + permission.name();
		    i++;
		    if(i<selectedItems.size()) {
			permissions = permissions + ",";
		    }
		}
		
		this.user.setPermission(permissions);
		
		List<String> evals = UserManager.evaluateUserData(user);
		
		if(evals.size() > 0) {
		    String notification = "User data not complete: ";
		    for(String eval : evals) {
			notification = notification + "<br>"+ eval;
		    }
		    
		    Notification.show(notification, Notification.Type.WARNING_MESSAGE);
		    return;
		}
		boolean succeeded;
		if(newUser) {
		    succeeded = UserManager.createUser(this.user);
		} else {
		    succeeded = UserManager.updateUser(this.user); 
		}
		
		if(!succeeded) {
		    Notification.show("Was not able to store user. Please check username!", Notification.Type.WARNING_MESSAGE);
		} else {
		    Notification.show("User " + this.user.getUsername() + " stored.", Notification.Type.HUMANIZED_MESSAGE);
		}
		
		NavigationController.openUserNavigation();
		
		for (Window window : this.getUI().getWindows()) {
		    this.getUI().removeWindow(window);
		}
	
    }

}
